############################################################
##cleaned_preprocessed.csv formation
############################################################
import pandas as pd
FILE = "cleaned.csv"
df = pd.read_csv(FILE)
#INSTRUMENTS = ["AAPL","GOOGL","MSFT"]
#INSTRUMENTS = df['instrument'].unique().tolist()
INSTRUMENTS = CONFIG_TARGET_INSTRUMENTS
############################################################

COLS = ['high', 'low', 'open', 'close', 'volume', 'quoteVolume','weightedAverage']
SCOLS = ["vh","vl","vc","open_s","volume_s","quoteVolume_s","weightedAverage_s"]
OBS_COLS = ['vh', 'vl', 'vc', 'open_s', 'volume_s', 'quoteVolume_s', 'weightedAverage_s', 'vh_roll_7', 'vh_roll_14', 'vh_roll_30', 'vl_roll_7', 'vl_roll_14', 'vl_roll_30', 'vc_roll_7', 'vc_roll_14', 'vc_roll_30', 'open_s_roll_7', 'open_s_roll_14', 'open_s_roll_30', 'volume_s_roll_7', 'volume_s_roll_14', 'volume_s_roll_30', 'quoteVolume_s_roll_7', 'quoteVolume_s_roll_14', 'quoteVolume_s_roll_30', 'weightedAverage_s_roll_7', 'weightedAverage_s_roll_14', 'weightedAverage_s_roll_30']
EPISODE_LENGTH = 500


df["date"] = df["date"].apply(lambda x: pd.Timestamp(x, unit='s', tz='US/Pacific'))
df = df[df["instrument"].isin(INSTRUMENTS)].sort_values("date")
df["vh"] = df["high"]/df["open"]
df["vl"] = df["low"]/df["open"]
df["vc"] = df["close"]/df["open"]
df["open_s"] = df.groupby("instrument")["open"].apply(lambda x: x - x.shift(1))
df["volume_s"] = df.groupby("instrument")["volume"].apply(lambda x: x - x.shift(1))
df["quoteVolume_s"] = df.groupby("instrument")["quoteVolume"].apply(lambda x: x - x.shift(1))
df["weightedAverage_s"] = df.groupby("instrument")["weightedAverage"].apply(lambda x: x - x.shift(1))

new_cols = []

for col in SCOLS:
    print(col)
    df[col+"_roll_7"] = df.groupby("instrument")[col].apply(lambda x: x.rolling(7).mean().bfill())
    new_cols.append(col+"_roll_7")
    df[col+"_roll_14"] = df.groupby("instrument")[col].apply(lambda x: x.rolling(14).mean().bfill())
    new_cols.append(col+"_roll_14")
    df[col+"_roll_30"] = df.groupby("instrument")[col].apply(lambda x: x.rolling(30).mean().bfill())
    new_cols.append(col+"_roll_30")

SCOLS.extend(new_cols)
print(SCOLS)
###############################
df = df.dropna()
df = df.reset_index(drop=True)


# Filter data based on the cut-off date
train_data = df[df['date'] < cut_off_date]
test_data = df[df['date'] >= cut_off_date]


# Save the preprocessed datasets
train_data.to_csv("train_data.csv", index=False)
test_data.to_csv("test_data.csv", index=False)
